<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon Dec 11 12:34:04 2023
<BR><P>
<H3>Maximum Stack Usage =        760 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
bsp_lcd_init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[96]">BDMA1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[80]">BDMA2_Channel0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[81]">BDMA2_Channel1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[82]">BDMA2_Channel2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[83]">BDMA2_Channel3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[84]">BDMA2_Channel4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[85]">BDMA2_Channel5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[86]">BDMA2_Channel6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[87]">BDMA2_Channel7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6b]">CEC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[88]">COMP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8e]">CRS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5c]">CRYP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7e]">DAC2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5b]">DCMI_PSSI_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[70]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[71]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4d]">DFSDM1_FLT4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4e]">DFSDM1_FLT5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4f]">DFSDM1_FLT6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[50]">DFSDM1_FLT7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[39]">DFSDM2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream2_IRQHandler</a> from bsps_adc.o(.text.DMA1_Stream2_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[67]">DMA2D_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream0_IRQHandler</a> from bsps_ad9288.o(.text.DMA2_Stream0_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6f]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7f]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[90]">DTS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8f]">ECC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[15]">EXTI0_IRQHandler</a> from bsps_encoder.o(.text.EXTI0_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[37]">EXTI15_10_IRQHandler</a> from bsps_encoder.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[16]">EXTI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[17]">EXTI2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[18]">EXTI3_IRQHandler</a> from bsps_encoder.o(.text.EXTI3_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[19]">EXTI4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[26]">EXTI9_5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[22]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[24]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[23]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[25]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4c]">FDCAN_CAL_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[13]">FLASH_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3f]">FMC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5e]">FPU_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[95]">GFXMMU_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5d]">HASH_RNG_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7d]">HSEM1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from stm32h7xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2f]">I2C1_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2e]">I2C1_EV_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[31]">I2C2_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[30]">I2C2_EV_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[56]">I2C3_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[55]">I2C3_EV_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6d]">I2C4_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6c]">I2C4_EV_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7a]">JPEG_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6a]">LPTIM1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[89]">LPTIM2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8a]">LPTIM3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8d]">LPUART1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[66]">LTDC_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[65]">LTDC_IRQHandler</a> from bsp_lcd.o(.text.LTDC_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[79]">MDIOS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[78]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7b]">MDMA_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[69]">OCTOSPI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[92]">OCTOSPI2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[93]">OTFDEC1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[94]">OTFDEC2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[10]">PVD_PVM_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from stm32h7xx_it.o(.text.PendSV_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[38]">RTC_Alarm_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[11]">RTC_TAMP_STAMP_CSS_LSE_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[12]">RTC_WKUP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[64]">SAI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[68]">SAI2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[40]">SDMMC1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7c]">SDMMC2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6e]">SPDIF_RX_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[32]">SPI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[33]">SPI2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[42]">SPI3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[61]">SPI4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[62]">SPI5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[63]">SPI6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from stm32h7xx_it.o(.text.SVC_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[74]">SWPMI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from stm32h7xx_it.o(.text.SysTick_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[98]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h7b0xx.o(.text)
 <LI><a href="#[75]">TIM15_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[76]">TIM16_IRQHandler</a> from os.o(.text.TIM16_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[77]">TIM17_IRQHandler</a> from os.o(.text.TIM17_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[27]">TIM1_BRK_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2a]">TIM1_CC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[29]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[28]">TIM1_UP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2b]">TIM2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2c]">TIM3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2d]">TIM4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[41]">TIM5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[45]">TIM6_DAC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[46]">TIM7_IRQHandler</a> from os.o(.text.TIM7_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3d]">TIM8_CC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from os.o(.text.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3b]">TIM8_UP_TIM13_IRQHandler</a> from os.o(.text.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[43]">UART4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[44]">UART5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5f]">UART7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[60]">UART8_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8b]">UART9_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8c]">USART10_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[34]">USART1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[35]">USART2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[36]">USART3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[54]">USART6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[91]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[f]">WWDG_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[99]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h7b0xx.o(.text)
 <LI><a href="#[b2]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[b4]">bsp_lcd_bcl_on</a> from bsp_lcd.o(.text.bsp_lcd_bcl_on) referenced from bsp_lcd.o(os_init_ram)
 <LI><a href="#[a9]">bsp_lcd_get_pixel</a> from bsp_lcd.o(.text.bsp_lcd_get_pixel) referenced 2 times from gui_dev.o(.text.gui_dev_init)
 <LI><a href="#[b3]">bsp_lcd_init</a> from bsp_lcd.o(.text.bsp_lcd_init) referenced from bsp_lcd.o(os_init_ram)
 <LI><a href="#[aa]">bsp_lcd_set_pixel</a> from bsp_lcd.o(.text.bsp_lcd_set_pixel) referenced 2 times from gui_dev.o(.text.gui_dev_init)
 <LI><a href="#[b9]">bsps_enc_gpio_init</a> from bsps_encoder.o(.text.bsps_enc_gpio_init) referenced from bsps_encoder.o(os_init_ram)
 <LI><a href="#[b6]">bsps_gt911_init</a> from bsps_touch.o(.text.bsps_gt911_init) referenced from bsps_touch.o(os_init_ram)
 <LI><a href="#[2]">bsps_gt911_scanf</a> from bsps_touch.o(.text.bsps_gt911_scanf) referenced 2 times from bsps_touch.o(os_tsk_ram)
 <LI><a href="#[b7]">bsps_sa_init</a> from bsps_ad9288.o(.text.bsps_sa_init) referenced from bsps_ad9288.o(os_init_ram)
 <LI><a href="#[ba]">bsps_sa_periph_init</a> from bsps_periph.o(.text.bsps_sa_periph_init) referenced from bsps_periph.o(os_init_ram)
 <LI><a href="#[3]">bsps_thread</a> from bsps_thread.o(.text.bsps_thread) referenced 2 times from bsps_thread.o(os_tsk_ram)
 <LI><a href="#[b8]">bsps_thread_init</a> from bsps_thread.o(.text.bsps_thread_init) referenced from bsps_thread.o(os_init_ram)
 <LI><a href="#[9a]">bsps_time_dec</a> from bsps_periph.o(.text.bsps_time_dec) referenced 2 times from bsps_encoder.o(.text.HAL_GPIO_EXTI_Callback)
 <LI><a href="#[9b]">bsps_time_inc</a> from bsps_periph.o(.text.bsps_time_inc) referenced 2 times from bsps_encoder.o(.text.HAL_GPIO_EXTI_Callback)
 <LI><a href="#[a4]">bsps_touch_ch12_exit_menu_task</a> from bsps_touch.o(.text.bsps_touch_ch12_exit_menu_task) referenced 4 times from bsps_touch.o(.text.bsps_touch_task)
 <LI><a href="#[a1]">bsps_touch_ch1_coup_task</a> from bsps_touch.o(.text.bsps_touch_ch1_coup_task) referenced 2 times from bsps_touch.o(.text.bsps_touch_task)
 <LI><a href="#[9f]">bsps_touch_ch1_ctl_task</a> from bsps_touch.o(.text.bsps_touch_ch1_ctl_task) referenced 2 times from bsps_touch.o(.text.bsps_touch_task)
 <LI><a href="#[a3]">bsps_touch_ch1_en_task</a> from bsps_touch.o(.text.bsps_touch_ch1_en_task) referenced 2 times from bsps_touch.o(.text.bsps_touch_task)
 <LI><a href="#[a2]">bsps_touch_ch1_ratio_task</a> from bsps_touch.o(.text.bsps_touch_ch1_ratio_task) referenced 2 times from bsps_touch.o(.text.bsps_touch_task)
 <LI><a href="#[a5]">bsps_touch_ch2_coup_task</a> from bsps_touch.o(.text.bsps_touch_ch2_coup_task) referenced 2 times from bsps_touch.o(.text.bsps_touch_task)
 <LI><a href="#[a0]">bsps_touch_ch2_ctl_task</a> from bsps_touch.o(.text.bsps_touch_ch2_ctl_task) referenced 2 times from bsps_touch.o(.text.bsps_touch_task)
 <LI><a href="#[a7]">bsps_touch_ch2_en_task</a> from bsps_touch.o(.text.bsps_touch_ch2_en_task) referenced 2 times from bsps_touch.o(.text.bsps_touch_task)
 <LI><a href="#[a6]">bsps_touch_ch2_ratio_task</a> from bsps_touch.o(.text.bsps_touch_ch2_ratio_task) referenced 2 times from bsps_touch.o(.text.bsps_touch_task)
 <LI><a href="#[a8]">bsps_touch_trig_task</a> from bsps_touch.o(.text.bsps_touch_trig_task) referenced 2 times from bsps_touch.o(.text.bsps_touch_task)
 <LI><a href="#[0]">bsps_ui_is_trig</a> from bsps_ui.o(.text.bsps_ui_is_trig) referenced 2 times from bsps_ui.o(os_tsk_ram)
 <LI><a href="#[ab]">bsps_ui_main_win_draw</a> from bsps_ui.o(.text.bsps_ui_main_win_draw) referenced 2 times from bsps_ui.o(.text.osc_calculate_main_size)
 <LI><a href="#[b5]">bsps_ui_wave_init</a> from bsps_ui.o(.text.bsps_ui_wave_init) referenced from bsps_ui.o(os_init_ram)
 <LI><a href="#[9d]">bsps_vol_scale_dec_ch2</a> from bsps_periph.o(.text.bsps_vol_scale_dec_ch2) referenced 2 times from bsps_encoder.o(.text.HAL_GPIO_EXTI_Callback)
 <LI><a href="#[9c]">bsps_vol_scale_inc_ch2</a> from bsps_periph.o(.text.bsps_vol_scale_inc_ch2) referenced 2 times from bsps_encoder.o(.text.HAL_GPIO_EXTI_Callback)
 <LI><a href="#[b1]">fputc</a> from retarget_io.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[bd]">gui_dev_init</a> from gui_dev.o(.text.gui_dev_init) referenced from gui.o(os_init_ram)
 <LI><a href="#[be]">gui_draw_task</a> from gui.o(.text.gui_draw_task) referenced from gui.o(os_init_ram)
 <LI><a href="#[4]">gui_thread</a> from gui.o(.text.gui_thread) referenced 2 times from gui.o(os_tsk_ram)
 <LI><a href="#[97]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1]">osc_cfg_task</a> from bsps_ui.o(.text.osc_cfg_task) referenced 2 times from bsps_ui.o(os_tsk_ram)
 <LI><a href="#[ac]">osc_draw_trig_line</a> from bsps_ui.o(.text.osc_draw_trig_line) referenced 2 times from bsps_ui.o(.text.osc_calculate_trig_line)
 <LI><a href="#[af]">osc_ui_btn_draw</a> from bsps_ui.o(.text.osc_ui_btn_draw) referenced 2 times from bsps_ui.o(.text.osc_ui_ch12_ctl_btn_calculate)
 <LI><a href="#[af]">osc_ui_btn_draw</a> from bsps_ui.o(.text.osc_ui_btn_draw) referenced 2 times from bsps_ui.o(.text.osc_ui_right_btn_calculate)
 <LI><a href="#[af]">osc_ui_btn_draw</a> from bsps_ui.o(.text.osc_ui_btn_draw) referenced 2 times from bsps_ui.o(.text.osc_ui_trig_btn_calculate)
 <LI><a href="#[ae]">osc_ui_ch12_btn_draw</a> from bsps_ui.o(.text.osc_ui_ch12_btn_draw) referenced 2 times from bsps_ui.o(.text.osc_ui_ch12_btn_calculate)
 <LI><a href="#[ae]">osc_ui_ch12_btn_draw</a> from bsps_ui.o(.text.osc_ui_ch12_btn_draw) referenced 2 times from bsps_ui.o(.text.osc_ui_trig_menu_btn_calculate)
 <LI><a href="#[b0]">osc_ui_ch12_menu_draw</a> from bsps_ui.o(.text.osc_ui_ch12_menu_draw) referenced 2 times from bsps_ui.o(.text.osc_ui_ch12_menu_calculate)
 <LI><a href="#[b0]">osc_ui_ch12_menu_draw</a> from bsps_ui.o(.text.osc_ui_ch12_menu_draw) referenced 2 times from bsps_ui.o(.text.osc_ui_trig_menu_calculate)
 <LI><a href="#[ad]">osc_ui_ch_btn_draw</a> from bsps_ui.o(.text.osc_ui_ch_btn_draw) referenced 2 times from bsps_ui.o(.text.osc_ui_ch12_btn_calculate)
 <LI><a href="#[ad]">osc_ui_ch_btn_draw</a> from bsps_ui.o(.text.osc_ui_ch_btn_draw) referenced 2 times from bsps_ui.o(.text.osc_ui_trig_menu_btn_calculate)
 <LI><a href="#[bc]">thread_start_it</a> from os.o(.text.thread_start_it) referenced from os.o(os_init_ram)
 <LI><a href="#[bb]">thread_timer_init</a> from os.o(.text.thread_timer_init) referenced from os.o(os_init_ram)
 <LI><a href="#[9e]">touch_test_task</a> from bsps_touch.o(.text.touch_test_task) referenced 2 times from bsps_touch.o(.text.bsps_touch_task)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[99]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(.text)
</UL>
<P><STRONG><a name="[1c1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[bf]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>BDMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>BDMA2_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>BDMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>BDMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DCMI_PSSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DFSDM1_FLT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DFSDM1_FLT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DFSDM1_FLT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DFSDM1_FLT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DFSDM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>GFXMMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>OCTOSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>OTFDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>OTFDEC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_TAMP_STAMP_CSS_LSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>UART9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>USART10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_ReadHZDot
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_ReadAsciiDot
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_ReadHZDot
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_ReadAsciiDot
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_dma_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_dev_l2_enable
</UL>

<P><STRONG><a name="[c6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1cc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1cd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1cf]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1d0]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1d1]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 238 bytes, Stack size 12 bytes, bsps_adc.o(.text.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA1_Stream2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, bsps_ad9288.o(.text.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; bsps_sa_trig_exti_set &rArr; HAL_NVIC_DisableIRQ &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_trig_exti_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_DMA_SET_TC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsps_encoder.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; bsps_sa_exti_callbcak_trig &rArr; bsps_sa_trig_exti_set &rArr; HAL_NVIC_DisableIRQ &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsps_encoder.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; bsps_sa_exti_callbcak_trig &rArr; bsps_sa_trig_exti_set &rArr; HAL_NVIC_DisableIRQ &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsps_encoder.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; bsps_sa_exti_callbcak_trig &rArr; bsps_sa_trig_exti_set &rArr; HAL_NVIC_DisableIRQ &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>Error_Handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Error_Handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_dma2d_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time7_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time17_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time16_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time14_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time13_init
</UL>

<P><STRONG><a name="[da]"></a>EventRecord2</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, eventrecorder.o(.text.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = EventRecord2 &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>EventRecordData</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, eventrecorder.o(.text.EventRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[eb]"></a>EventRecorderEnable</STRONG> (Thumb, 146 bytes, Stack size 28 bytes, eventrecorder.o(.text.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[e5]"></a>EventRecorderInitialize</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, eventrecorder.o(.text.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerSetup
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[ec]"></a>EventRecorderStart</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[d7]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[ea]"></a>EventRecorderTimerGetFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerGetFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[e9]"></a>EventRecorderTimerSetup</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerSetup))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[ef]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, stm32h7xx_hal_dac.o(.text.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DAC_ConfigChannel &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_DAC_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32h7xx_hal_dac.o(.text.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_dac.o(.text.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[17d]"></a>HAL_DAC_SetValue</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32h7xx_hal_dac.o(.text.HAL_DAC_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_set_trig_vol
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[17e]"></a>HAL_DAC_Start</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, stm32h7xx_hal_dac.o(.text.HAL_DAC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DAC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[f4]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32h7xx_hal_dma2d.o(.text.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_dma2d_init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_dma2d.o(.text.HAL_DMA2D_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_DMA_Init</STRONG> (Thumb, 2586 bytes, Stack size 64 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_dma_init
</UL>

<P><STRONG><a name="[fb]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 1794 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_dma_init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_Delay</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32h7xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, bsps_encoder.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; bsps_sa_exti_callbcak_trig &rArr; bsps_sa_trig_exti_set &rArr; HAL_NVIC_DisableIRQ &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_enc_callback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_exti_callbcak_trig
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; bsps_sa_exti_callbcak_trig &rArr; bsps_sa_trig_exti_set &rArr; HAL_NVIC_DisableIRQ &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>HAL_GPIO_Init</STRONG> (Thumb, 964 bytes, Stack size 64 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_enc_gpio_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>

<P><STRONG><a name="[169]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_enc_callback
</UL>

<P><STRONG><a name="[11b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_sw_only_ch2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_rly_att_sel_ch2
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_rly_att_ch2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_rly_att_ch1
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_oh_ac_ch1
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_att_sel_ch2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_att_sel_ch1
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_adc_mode_ch1_ch2_align
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_oh_dc_ch2
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_oh_ac_ch2
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_bsps_hard_reset_stop
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_bsps_hard_reset
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_bcl_on
</UL>

<P><STRONG><a name="[f0]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[16f]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, stm32h7xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_iic_init
</UL>

<P><STRONG><a name="[170]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_iic_init
</UL>

<P><STRONG><a name="[100]"></a>HAL_I2C_Init</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_iic_init
</UL>

<P><STRONG><a name="[102]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_r_reg
</UL>

<P><STRONG><a name="[107]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_w_reg
</UL>

<P><STRONG><a name="[101]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 274 bytes, Stack size 256 bytes, bsps_iic.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[154]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10c]"></a>HAL_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_InitTick</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
</UL>

<P><STRONG><a name="[116]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_LTDC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_LTDC_IRQHandler &rArr; HAL_LTDC_ReloadEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>HAL_LTDC_Init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
</UL>

<P><STRONG><a name="[117]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_LineEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_LTDC_LineEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 610 bytes, Stack size 280 bytes, bsp_lcd.o(.text.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_LTDC_ReloadEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_LTDC_SetAlpha</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_dev_l2_enable
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_dev_l2_disable
</UL>

<P><STRONG><a name="[11d]"></a>HAL_LTDC_SetWindowPosition</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_SetWindowPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_dev_l2_enable
</UL>

<P><STRONG><a name="[11e]"></a>HAL_LTDC_SetWindowSize</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_SetWindowSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_LTDC_SetWindowSize &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_dev_l2_enable
</UL>

<P><STRONG><a name="[151]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[150]"></a>HAL_MPU_Disable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[152]"></a>HAL_MPU_Enable</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_MPU_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[110]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_DisableIRQ &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_trig_exti_set
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_NVIC_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_enc_gpio_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_trig_exti_set
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_NVIC_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_start_it
</UL>

<P><STRONG><a name="[112]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_enc_gpio_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_NVIC_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[10d]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10a]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 3832 bytes, Stack size 112 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 1176 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10e]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 784 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2620 bytes, Stack size 56 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[111]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[136]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_Break2Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 344 bytes, Stack size 20 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time7_init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time7_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time17_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time16_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time14_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time13_init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, os.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 260 bytes, Stack size 12 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time7_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time17_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time16_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time14_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time13_init
</UL>

<P><STRONG><a name="[131]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 692 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_TriggerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_init
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_init
</UL>

<P><STRONG><a name="[141]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 638 bytes, Stack size 72 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_init
</UL>

<P><STRONG><a name="[134]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>LCD_DispStr</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, bsp_lcd.o(.text.LCD_DispStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch_btn_draw
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_btn_draw
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_btn_draw
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_trig_vol_draw
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_timebase_draw
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_vol_gain_draw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_ratio_draw
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_acdc_draw
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_is_trig
</UL>

<P><STRONG><a name="[147]"></a>LCD_DispStrEx</STRONG> (Thumb, 950 bytes, Stack size 216 bytes, bsp_lcd.o(.text.LCD_DispStrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_pixel_l2
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_pixel
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_rect
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetStrWidth
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFontHeight
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_ReadHZDot
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_ReadAsciiDot
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
</UL>

<P><STRONG><a name="[149]"></a>LCD_GetFontHeight</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, bsp_lcd.o(.text.LCD_GetFontHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_GetFontHeight
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
</UL>

<P><STRONG><a name="[14e]"></a>LCD_GetFontWidth</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, bsp_lcd.o(.text.LCD_GetFontWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_GetFontWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetStrWidth
</UL>

<P><STRONG><a name="[148]"></a>LCD_GetStrWidth</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, bsp_lcd.o(.text.LCD_GetStrWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_GetStrWidth &rArr; LCD_GetFontWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFontWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
</UL>

<P><STRONG><a name="[65]"></a>LTDC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_lcd.o(.text.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_ReloadEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[186]"></a>OSC_DMA_CHECK_TC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsps_ad9288.o(.text.OSC_DMA_CHECK_TC))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_thread
</UL>

<P><STRONG><a name="[187]"></a>OSC_DMA_CLEAR_TC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsps_ad9288.o(.text.OSC_DMA_CLEAR_TC))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_thread
</UL>

<P><STRONG><a name="[d1]"></a>OSC_DMA_SET_TC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsps_ad9288.o(.text.OSC_DMA_SET_TC))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>SystemInit</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>TIM16_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os.o(.text.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_TriggerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_thead_priority_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TIM17_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os.o(.text.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM17_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_TriggerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_thead_priority_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM7_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os.o(.text.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_TriggerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_thead_priority_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os.o(.text.TIM8_TRG_COM_TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM8_TRG_COM_TIM14_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_TriggerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_thead_priority_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os.o(.text.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_TriggerCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_thead_priority_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 410 bytes, Stack size 12 bytes, stm32h7xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[143]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[13b]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[15c]"></a>bsp_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp.o(.text.bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bsp_Init &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_dev_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CACHE_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>bsp_lcd_dma2d_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_lcd.o(.text.bsp_lcd_dma2d_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_lcd_dma2d_init &rArr; Error_Handler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_init
</UL>

<P><STRONG><a name="[160]"></a>bsp_lcd_draw_line</STRONG> (Thumb, 424 bytes, Stack size 64 bytes, bsp_lcd.o(.text.bsp_lcd_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_lcd_draw_line &rArr; bsp_lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_main_win_draw
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_lines
</UL>

<P><STRONG><a name="[161]"></a>bsp_lcd_draw_line_h</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bsp_lcd.o(.text.bsp_lcd_draw_line_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_lcd_draw_line_h &rArr; bsp_lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_tri
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_rect
</UL>

<P><STRONG><a name="[162]"></a>bsp_lcd_draw_line_v</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bsp_lcd.o(.text.bsp_lcd_draw_line_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_lcd_draw_line_v &rArr; bsp_lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_rect
</UL>

<P><STRONG><a name="[163]"></a>bsp_lcd_draw_lines</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, bsp_lcd.o(.text.bsp_lcd_draw_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_lcd_draw_lines &rArr; bsp_lcd_draw_line &rArr; bsp_lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_thread
</UL>

<P><STRONG><a name="[164]"></a>bsp_lcd_draw_rect</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, bsp_lcd.o(.text.bsp_lcd_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_lcd_draw_rect &rArr; bsp_lcd_draw_line_v &rArr; bsp_lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_line_v
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_line_h
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_main_win_draw
</UL>

<P><STRONG><a name="[165]"></a>bsp_lcd_draw_tri</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, bsp_lcd.o(.text.bsp_lcd_draw_tri))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_lcd_draw_tri &rArr; bsp_lcd_draw_line_h &rArr; bsp_lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_line_h
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_trig_icon_draw
</UL>

<P><STRONG><a name="[14a]"></a>bsp_lcd_fill_rect</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, bsp_lcd.o(.text.bsp_lcd_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_FillBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_thread
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_btn_draw
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_trig_vol_draw
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_timebase_draw
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_vol_gain_draw
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
</UL>

<P><STRONG><a name="[a9]"></a>bsp_lcd_get_pixel</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, bsp_lcd.o(.text.bsp_lcd_get_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsp_lcd_get_pixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_dev.o(.text.gui_dev_init)
</UL>
<P><STRONG><a name="[aa]"></a>bsp_lcd_set_pixel</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_lcd.o(.text.bsp_lcd_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_lcd_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_btn_draw
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_trig_line_draw
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_main_win_draw
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_line_v
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_line_h
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_line
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_dev.o(.text.gui_dev_init)
</UL>
<P><STRONG><a name="[14d]"></a>bsp_lcd_set_pixel_l2</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, bsp_lcd.o(.text.bsp_lcd_set_pixel_l2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsp_lcd_set_pixel_l2
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch_btn_draw
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_menu_draw
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
</UL>

<P><STRONG><a name="[167]"></a>bsps_bsps_hard_reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsps_touch.o(.text.bsps_bsps_hard_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsps_bsps_hard_reset &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_init
</UL>

<P><STRONG><a name="[168]"></a>bsps_bsps_hard_reset_stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsps_touch.o(.text.bsps_bsps_hard_reset_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsps_bsps_hard_reset_stop &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_init
</UL>

<P><STRONG><a name="[fe]"></a>bsps_enc_callback</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, bsps_encoder.o(.text.bsps_enc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsps_enc_callback &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[b9]"></a>bsps_enc_gpio_init</STRONG> (Thumb, 422 bytes, Stack size 96 bytes, bsps_encoder.o(.text.bsps_enc_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bsps_enc_gpio_init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_encoder.o(os_init_ram)
</UL>
<P><STRONG><a name="[184]"></a>bsps_get_run_msg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsps_thread.o(.text.bsps_get_run_msg))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_vol_scale_set_ch2
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_time_psc_set
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_trig_read
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_trig_task
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_task
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_menu_enter
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch1_ratio_task
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_is_trig
</UL>

<P><STRONG><a name="[16b]"></a>bsps_gt911_r_reg</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, bsps_touch.o(.text.bsps_gt911_r_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = bsps_gt911_r_reg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_scanf
</UL>

<P><STRONG><a name="[2]"></a>bsps_gt911_scanf</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, bsps_touch.o(.text.bsps_gt911_scanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = bsps_gt911_scanf &rArr; bsps_touch_task &rArr; bsps_touch_area_task &rArr; bsps_touch_menu_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_task
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_w_reg
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_r_reg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_trig_line_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(os_tsk_ram)
</UL>
<P><STRONG><a name="[16d]"></a>bsps_gt911_w_reg</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, bsps_touch.o(.text.bsps_gt911_w_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = bsps_gt911_w_reg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_scanf
</UL>

<P><STRONG><a name="[16a]"></a>bsps_iic_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, bsps_iic.o(.text.bsps_iic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = bsps_iic_init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_init
</UL>

<P><STRONG><a name="[171]"></a>bsps_sa_adc_mode_ch1_ch2_align</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsps_periph.o(.text.bsps_sa_adc_mode_ch1_ch2_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsps_sa_adc_mode_ch1_ch2_align &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[172]"></a>bsps_sa_att_sel_ch1</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, bsps_periph.o(.text.bsps_sa_att_sel_ch1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsps_sa_att_sel_ch1 &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[173]"></a>bsps_sa_att_sel_ch2</STRONG> (Thumb, 338 bytes, Stack size 64 bytes, bsps_periph.o(.text.bsps_sa_att_sel_ch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsps_sa_att_sel_ch2 &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_vol_scale_set_ch2
</UL>

<P><STRONG><a name="[ff]"></a>bsps_sa_exti_callbcak_trig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsps_ad9288.o(.text.bsps_sa_exti_callbcak_trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsps_sa_exti_callbcak_trig &rArr; bsps_sa_trig_exti_set &rArr; HAL_NVIC_DisableIRQ &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_trig_exti_set
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[177]"></a>bsps_sa_oh_ac_ch1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsps_periph.o(.text.bsps_sa_oh_ac_ch1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsps_sa_oh_ac_ch1 &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[178]"></a>bsps_sa_oh_ac_ch2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsps_periph.o(.text.bsps_sa_oh_ac_ch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsps_sa_oh_ac_ch2 &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_thread_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch1_coup_task
</UL>

<P><STRONG><a name="[179]"></a>bsps_sa_oh_dc_ch2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsps_periph.o(.text.bsps_sa_oh_dc_ch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsps_sa_oh_dc_ch2 &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch1_coup_task
</UL>

<P><STRONG><a name="[ba]"></a>bsps_sa_periph_init</STRONG> (Thumb, 856 bytes, Stack size 200 bytes, bsps_periph.o(.text.bsps_sa_periph_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = bsps_sa_periph_init &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_sw_only_ch2
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_set_trig_vol
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_set_pwm_pulse_ch2
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_set_pwm_pulse_ch1
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_rly_att_ch2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_rly_att_ch1
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_oh_ac_ch1
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_att_sel_ch2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_att_sel_ch1
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_adc_mode_ch1_ch2_align
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Start
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_oh_ac_ch2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_periph.o(os_init_ram)
</UL>
<P><STRONG><a name="[17a]"></a>bsps_sa_rly_att_ch1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsps_periph.o(.text.bsps_sa_rly_att_ch1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsps_sa_rly_att_ch1 &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[17b]"></a>bsps_sa_rly_att_ch2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsps_periph.o(.text.bsps_sa_rly_att_ch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsps_sa_rly_att_ch2 &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[182]"></a>bsps_sa_rly_att_sel_ch2</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsps_periph.o(.text.bsps_sa_rly_att_sel_ch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsps_sa_rly_att_sel_ch2 &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_vol_scale_set_ch2
</UL>

<P><STRONG><a name="[18b]"></a>bsps_sa_set_psc</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, bsps_ad9288.o(.text.bsps_sa_set_psc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsps_sa_set_psc
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_time_psc_set
</UL>

<P><STRONG><a name="[180]"></a>bsps_sa_set_pwm_pulse_ch1</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, bsps_periph.o(.text.bsps_sa_set_pwm_pulse_ch1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsps_sa_set_pwm_pulse_ch1
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[181]"></a>bsps_sa_set_pwm_pulse_ch2</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, bsps_periph.o(.text.bsps_sa_set_pwm_pulse_ch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsps_sa_set_pwm_pulse_ch2
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[17f]"></a>bsps_sa_set_trig_vol</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsps_periph.o(.text.bsps_sa_set_trig_vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsps_sa_set_trig_vol &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_trig_lev_set
</UL>

<P><STRONG><a name="[17c]"></a>bsps_sa_sw_only_ch2</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsps_periph.o(.text.bsps_sa_sw_only_ch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsps_sa_sw_only_ch2 &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_periph_init
</UL>

<P><STRONG><a name="[d2]"></a>bsps_sa_trig_exti_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsps_ad9288.o(.text.bsps_sa_trig_exti_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsps_sa_trig_exti_set &rArr; HAL_NVIC_DisableIRQ &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_exti_callbcak_trig
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>bsps_sa_trig_read</STRONG> (Thumb, 540 bytes, Stack size 56 bytes, bsps_ad9288.o(.text.bsps_sa_trig_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bsps_sa_trig_read &rArr; osc_copy_from_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_copy_from_fifo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_get_run_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_thread
</UL>

<P><STRONG><a name="[3]"></a>bsps_thread</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsps_thread.o(.text.bsps_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bsps_thread &rArr; bsp_lcd_draw_lines &rArr; bsp_lcd_draw_line &rArr; bsp_lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_trig_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_DMA_CLEAR_TC
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSC_DMA_CHECK_TC
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_main_win_draw
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_rect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_lines
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_thread.o(os_tsk_ram)
</UL>
<P><STRONG><a name="[b8]"></a>bsps_thread_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bsps_thread.o(.text.bsps_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = bsps_thread_init &rArr; bsps_vol_scale_set_ch2 &rArr; bsps_ui_ch12_vol_gain_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_vol_scale_set_ch2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_xdata_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_time_psc_set
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_oh_ac_ch2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_thread.o(os_init_ram)
</UL>
<P><STRONG><a name="[9a]"></a>bsps_time_dec</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsps_periph.o(.text.bsps_time_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = bsps_time_dec &rArr; bsps_time_psc_set &rArr; bsps_ui_timebase_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_time_psc_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_encoder.o(.text.HAL_GPIO_EXTI_Callback)
</UL>
<P><STRONG><a name="[9b]"></a>bsps_time_inc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsps_periph.o(.text.bsps_time_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = bsps_time_inc &rArr; bsps_time_psc_set &rArr; bsps_ui_timebase_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_time_psc_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_encoder.o(.text.HAL_GPIO_EXTI_Callback)
</UL>
<P><STRONG><a name="[176]"></a>bsps_time_psc_set</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, bsps_periph.o(.text.bsps_time_psc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = bsps_time_psc_set &rArr; bsps_ui_timebase_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_set_psc
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_timebase_draw
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_get_run_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_time_inc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_time_dec
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_thread_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_init
</UL>

<P><STRONG><a name="[18c]"></a>bsps_touch_area_task</STRONG> (Thumb, 254 bytes, Stack size 80 bytes, bsps_touch.o(.text.bsps_touch_area_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsps_touch_area_task &rArr; bsps_touch_menu_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_menu_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_task
</UL>

<P><STRONG><a name="[a4]"></a>bsps_touch_ch12_exit_menu_task</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsps_touch.o(.text.bsps_touch_ch12_exit_menu_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsps_touch_ch12_exit_menu_task &rArr; osc_ui_ch12_ctl_sel &rArr; osc_dev_l2_disable &rArr; HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_ctl_sel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(.text.bsps_touch_task)
</UL>
<P><STRONG><a name="[a1]"></a>bsps_touch_ch1_coup_task</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsps_touch.o(.text.bsps_touch_ch1_coup_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = bsps_touch_ch1_coup_task &rArr; bsps_ui_ch12_acdc_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_oh_dc_ch2
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_oh_ac_ch2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch1_btn_sel
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_acdc_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(.text.bsps_touch_task)
</UL>
<P><STRONG><a name="[9f]"></a>bsps_touch_ch1_ctl_task</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsps_touch.o(.text.bsps_touch_ch1_ctl_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsps_touch_ch1_ctl_task &rArr; osc_ui_ch12_ctl_sel &rArr; osc_dev_l2_disable &rArr; HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_ctl_sel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(.text.bsps_touch_task)
</UL>
<P><STRONG><a name="[a3]"></a>bsps_touch_ch1_en_task</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsps_touch.o(.text.bsps_touch_ch1_en_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsps_touch_ch1_en_task &rArr; osc_ui_ch1_btn_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch1_btn_sel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(.text.bsps_touch_task)
</UL>
<P><STRONG><a name="[a2]"></a>bsps_touch_ch1_ratio_task</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, bsps_touch.o(.text.bsps_touch_ch1_ratio_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = bsps_touch_ch1_ratio_task &rArr; bsps_ui_ch12_ratio_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch1_btn_sel
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_trig_vol_draw
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_vol_gain_draw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_ratio_draw
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_get_run_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(.text.bsps_touch_task)
</UL>
<P><STRONG><a name="[a5]"></a>bsps_touch_ch2_coup_task</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsps_touch.o(.text.bsps_touch_ch2_coup_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = bsps_touch_ch2_coup_task &rArr; bsps_ui_ch12_acdc_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch2_btn_sel
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_acdc_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(.text.bsps_touch_task)
</UL>
<P><STRONG><a name="[a0]"></a>bsps_touch_ch2_ctl_task</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsps_touch.o(.text.bsps_touch_ch2_ctl_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsps_touch_ch2_ctl_task &rArr; osc_ui_ch12_ctl_sel &rArr; osc_dev_l2_disable &rArr; HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_ctl_sel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(.text.bsps_touch_task)
</UL>
<P><STRONG><a name="[a7]"></a>bsps_touch_ch2_en_task</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsps_touch.o(.text.bsps_touch_ch2_en_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsps_touch_ch2_en_task &rArr; osc_ui_ch2_btn_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch2_btn_sel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(.text.bsps_touch_task)
</UL>
<P><STRONG><a name="[a6]"></a>bsps_touch_ch2_ratio_task</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsps_touch.o(.text.bsps_touch_ch2_ratio_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = bsps_touch_ch2_ratio_task &rArr; bsps_ui_ch12_ratio_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch2_btn_sel
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_ratio_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(.text.bsps_touch_task)
</UL>
<P><STRONG><a name="[18d]"></a>bsps_touch_menu_enter</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsps_touch.o(.text.bsps_touch_menu_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsps_touch_menu_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_get_run_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_area_task
</UL>

<P><STRONG><a name="[16e]"></a>bsps_touch_task</STRONG> (Thumb, 2486 bytes, Stack size 288 bytes, bsps_touch.o(.text.bsps_touch_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = bsps_touch_task &rArr; bsps_touch_area_task &rArr; bsps_touch_menu_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_area_task
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_get_run_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_scanf
</UL>

<P><STRONG><a name="[a8]"></a>bsps_touch_trig_task</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, bsps_touch.o(.text.bsps_touch_trig_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = bsps_touch_trig_task &rArr; bsps_ui_trig_vol_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_trig_lev_set
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_lines_show
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_move_trig_lines
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_trig_vol_draw
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_trig_icon_draw
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_get_run_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(.text.bsps_touch_task)
</UL>
<P><STRONG><a name="[198]"></a>bsps_trig_lev_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsps_periph.o(.text.bsps_trig_lev_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsps_trig_lev_set &rArr; bsps_sa_set_trig_vol &rArr; HAL_DAC_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_set_trig_vol
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_trig_task
</UL>

<P><STRONG><a name="[18f]"></a>bsps_ui_ch12_acdc_draw</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, bsps_ui.o(.text.bsps_ui_ch12_acdc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = bsps_ui_ch12_acdc_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch2_coup_task
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch1_coup_task
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_btn_draw
</UL>

<P><STRONG><a name="[193]"></a>bsps_ui_ch12_ratio_draw</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, bsps_ui.o(.text.bsps_ui_ch12_ratio_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = bsps_ui_ch12_ratio_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch2_ratio_task
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch1_ratio_task
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_btn_draw
</UL>

<P><STRONG><a name="[191]"></a>bsps_ui_ch12_vol_gain_draw</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, bsps_ui.o(.text.bsps_ui_ch12_vol_gain_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = bsps_ui_ch12_vol_gain_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_rect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_vol_scale_set_ch2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch1_ratio_task
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_btn_draw
</UL>

<P><STRONG><a name="[ab]"></a>bsps_ui_main_win_draw</STRONG> (Thumb, 506 bytes, Stack size 32 bytes, bsps_ui.o(.text.bsps_ui_main_win_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bsps_ui_main_win_draw &rArr; bsp_lcd_draw_line &rArr; bsp_lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_pixel
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_rect
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_ui.o(.text.osc_calculate_main_size)
</UL>
<P><STRONG><a name="[18a]"></a>bsps_ui_timebase_draw</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, bsps_ui.o(.text.bsps_ui_timebase_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = bsps_ui_timebase_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_rect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_time_psc_set
</UL>

<P><STRONG><a name="[195]"></a>bsps_ui_trig_icon_draw</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bsps_ui.o(.text.bsps_ui_trig_icon_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsps_ui_trig_icon_draw &rArr; bsp_lcd_draw_tri &rArr; bsp_lcd_draw_line_h &rArr; bsp_lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_draw_tri
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_trig_task
</UL>

<P><STRONG><a name="[16c]"></a>bsps_ui_trig_line_draw</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bsps_ui.o(.text.bsps_ui_trig_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsps_ui_trig_line_draw &rArr; bsp_lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_gt911_scanf
</UL>

<P><STRONG><a name="[192]"></a>bsps_ui_trig_vol_draw</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, bsps_ui.o(.text.bsps_ui_trig_vol_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = bsps_ui_trig_vol_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_rect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_trig_task
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch1_ratio_task
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_btn_draw
</UL>

<P><STRONG><a name="[b5]"></a>bsps_ui_wave_init</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, bsps_ui.o(.text.bsps_ui_wave_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsps_ui_wave_init &rArr; osc_ui_ch12_btn_calculate &rArr; gui_wid_creater
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_menu_calculate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_menu_btn_calculate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_btn_calculate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_right_menu_calculate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_right_btn_calculate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_menu_calculate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_ctl_btn_calculate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_btn_calculate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_calculate_trig_line
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_calculate_main_size
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gui_dev
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_get_run_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_ui.o(os_init_ram)
</UL>
<P><STRONG><a name="[9d]"></a>bsps_vol_scale_dec_ch2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsps_periph.o(.text.bsps_vol_scale_dec_ch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = bsps_vol_scale_dec_ch2 &rArr; bsps_vol_scale_set_ch2 &rArr; bsps_ui_ch12_vol_gain_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_vol_scale_set_ch2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_encoder.o(.text.HAL_GPIO_EXTI_Callback)
</UL>
<P><STRONG><a name="[9c]"></a>bsps_vol_scale_inc_ch2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsps_periph.o(.text.bsps_vol_scale_inc_ch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = bsps_vol_scale_inc_ch2 &rArr; bsps_vol_scale_set_ch2 &rArr; bsps_ui_ch12_vol_gain_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_vol_scale_set_ch2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_encoder.o(.text.HAL_GPIO_EXTI_Callback)
</UL>
<P><STRONG><a name="[189]"></a>bsps_vol_scale_set_ch2</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bsps_periph.o(.text.bsps_vol_scale_set_ch2))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = bsps_vol_scale_set_ch2 &rArr; bsps_ui_ch12_vol_gain_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_rly_att_sel_ch2
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_att_sel_ch2
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_vol_gain_draw
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_get_run_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_vol_scale_inc_ch2
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_vol_scale_dec_ch2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_thread_init
</UL>

<P><STRONG><a name="[b1]"></a>fputc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, retarget_io.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[19a]"></a>get_gui_dev</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_dev.o(.text.get_gui_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_gui_dev
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_dev_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
</UL>

<P><STRONG><a name="[1a7]"></a>gui_clear_widget</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui.o(.text.gui_clear_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gui_clear_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_win
</UL>

<P><STRONG><a name="[1b3]"></a>gui_create_event</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui.o(.text.gui_create_event))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_btn_sel
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch2_btn_sel
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch1_btn_sel
</UL>

<P><STRONG><a name="[bd]"></a>gui_dev_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_dev.o(.text.gui_dev_init))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gui_dev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui.o(os_init_ram)
</UL>
<P><STRONG><a name="[1b6]"></a>gui_hide_widget</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, gui.o(.text.gui_hide_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gui_hide_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_lines_show
</UL>

<P><STRONG><a name="[1b4]"></a>gui_move_widget</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, gui.o(.text.gui_move_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gui_move_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_move_trig_lines
</UL>

<P><STRONG><a name="[1b7]"></a>gui_show_widget</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, gui.o(.text.gui_show_widget))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gui_show_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_lines_show
</UL>

<P><STRONG><a name="[1a6]"></a>gui_show_win</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gui.o(.text.gui_show_win))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gui_show_win &rArr; gui_clear_widget
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_clear_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_ctl_sel
</UL>

<P><STRONG><a name="[1b0]"></a>gui_wid_creater</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gui.o(.text.gui_wid_creater))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gui_wid_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_menu_btn_calculate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_btn_calculate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_right_btn_calculate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_ctl_btn_calculate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_btn_calculate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_calculate_trig_line
</UL>

<P><STRONG><a name="[1af]"></a>gui_win_creater</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, gui.o(.text.gui_win_creater))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gui_win_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_menu_calculate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_right_menu_calculate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_menu_calculate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_calculate_main_size
</UL>

<P><STRONG><a name="[97]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; bsp_Init &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_thead_priority_idle
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[15e]"></a>os_dev_init</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, os.o(.text.os_dev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = os_dev_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[19b]"></a>osc_calculate_main_size</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bsps_ui.o(.text.osc_calculate_main_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osc_calculate_main_size &rArr; gui_win_creater
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_win_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
</UL>

<P><STRONG><a name="[19d]"></a>osc_calculate_trig_line</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, bsps_ui.o(.text.osc_calculate_trig_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osc_calculate_trig_line &rArr; gui_wid_creater
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_wid_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
</UL>

<P><STRONG><a name="[185]"></a>osc_copy_from_fifo</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, bsps_ad9288.o(.text.osc_copy_from_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osc_copy_from_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_trig_read
</UL>

<P><STRONG><a name="[1b1]"></a>osc_dev_l2_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_lcd.o(.text.osc_dev_l2_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osc_dev_l2_disable &rArr; HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_ctl_sel
</UL>

<P><STRONG><a name="[1b2]"></a>osc_dev_l2_enable</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bsp_lcd.o(.text.osc_dev_l2_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osc_dev_l2_enable &rArr; HAL_LTDC_SetWindowSize &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowSize
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_menu_draw
</UL>

<P><STRONG><a name="[af]"></a>osc_ui_btn_draw</STRONG> (Thumb, 1204 bytes, Stack size 80 bytes, bsps_ui.o(.text.osc_ui_btn_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = osc_ui_btn_draw &rArr; bsps_ui_ch12_ratio_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_trig_vol_draw
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_vol_gain_draw
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_ratio_draw
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_ch12_acdc_draw
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_pixel
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_rect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bsps_ui.o(.text.osc_ui_right_btn_calculate)
<LI> bsps_ui.o(.text.osc_ui_ch12_ctl_btn_calculate)
<LI> bsps_ui.o(.text.osc_ui_trig_btn_calculate)
</UL>
<P><STRONG><a name="[1a1]"></a>osc_ui_ch12_btn_calculate</STRONG> (Thumb, 572 bytes, Stack size 32 bytes, bsps_ui.o(.text.osc_ui_ch12_btn_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osc_ui_ch12_btn_calculate &rArr; gui_wid_creater
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_wid_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
</UL>

<P><STRONG><a name="[ae]"></a>osc_ui_ch12_btn_draw</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bsps_ui.o(.text.osc_ui_ch12_btn_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = osc_ui_ch12_btn_draw &rArr; osc_ui_ch_btn_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch_btn_draw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bsps_ui.o(.text.osc_ui_ch12_btn_calculate)
<LI> bsps_ui.o(.text.osc_ui_trig_menu_btn_calculate)
</UL>
<P><STRONG><a name="[19f]"></a>osc_ui_ch12_ctl_btn_calculate</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, bsps_ui.o(.text.osc_ui_ch12_ctl_btn_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osc_ui_ch12_ctl_btn_calculate &rArr; gui_wid_creater
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_wid_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
</UL>

<P><STRONG><a name="[18e]"></a>osc_ui_ch12_ctl_sel</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bsps_ui.o(.text.osc_ui_ch12_ctl_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osc_ui_ch12_ctl_sel &rArr; osc_dev_l2_disable &rArr; HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_win
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_dev_l2_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch2_ctl_task
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch1_ctl_task
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch12_exit_menu_task
</UL>

<P><STRONG><a name="[1a0]"></a>osc_ui_ch12_menu_calculate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsps_ui.o(.text.osc_ui_ch12_menu_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osc_ui_ch12_menu_calculate &rArr; gui_win_creater
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_win_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
</UL>

<P><STRONG><a name="[b0]"></a>osc_ui_ch12_menu_draw</STRONG> (Thumb, 1040 bytes, Stack size 48 bytes, bsps_ui.o(.text.osc_ui_ch12_menu_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osc_ui_ch12_menu_draw &rArr; osc_dev_l2_enable &rArr; HAL_LTDC_SetWindowSize &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_dev_l2_enable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_pixel_l2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bsps_ui.o(.text.osc_ui_ch12_menu_calculate)
<LI> bsps_ui.o(.text.osc_ui_trig_menu_calculate)
</UL>
<P><STRONG><a name="[190]"></a>osc_ui_ch1_btn_sel</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, bsps_ui.o(.text.osc_ui_ch1_btn_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osc_ui_ch1_btn_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_create_event
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch1_ratio_task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch1_en_task
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch1_coup_task
</UL>

<P><STRONG><a name="[194]"></a>osc_ui_ch2_btn_sel</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, bsps_ui.o(.text.osc_ui_ch2_btn_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osc_ui_ch2_btn_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_create_event
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch2_ratio_task
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch2_en_task
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_ch2_coup_task
</UL>

<P><STRONG><a name="[ad]"></a>osc_ui_ch_btn_draw</STRONG> (Thumb, 1224 bytes, Stack size 56 bytes, bsps_ui.o(.text.osc_ui_ch_btn_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = osc_ui_ch_btn_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_pixel_l2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_ch12_btn_draw
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bsps_ui.o(.text.osc_ui_ch12_btn_calculate)
<LI> bsps_ui.o(.text.osc_ui_trig_menu_btn_calculate)
</UL>
<P><STRONG><a name="[197]"></a>osc_ui_move_trig_lines</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsps_ui.o(.text.osc_ui_move_trig_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osc_ui_move_trig_lines &rArr; gui_move_widget
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_move_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_trig_task
</UL>

<P><STRONG><a name="[19e]"></a>osc_ui_right_btn_calculate</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, bsps_ui.o(.text.osc_ui_right_btn_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osc_ui_right_btn_calculate &rArr; gui_wid_creater
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_wid_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
</UL>

<P><STRONG><a name="[19c]"></a>osc_ui_right_menu_calculate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsps_ui.o(.text.osc_ui_right_menu_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osc_ui_right_menu_calculate &rArr; gui_win_creater
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_win_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
</UL>

<P><STRONG><a name="[1a2]"></a>osc_ui_trig_btn_calculate</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bsps_ui.o(.text.osc_ui_trig_btn_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osc_ui_trig_btn_calculate &rArr; gui_wid_creater
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_wid_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
</UL>

<P><STRONG><a name="[1b5]"></a>osc_ui_trig_btn_sel</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, bsps_ui.o(.text.osc_ui_trig_btn_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osc_ui_trig_btn_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_create_event
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_test_task
</UL>

<P><STRONG><a name="[196]"></a>osc_ui_trig_lines_show</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsps_ui.o(.text.osc_ui_trig_lines_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osc_ui_trig_lines_show &rArr; gui_show_widget
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_show_widget
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_hide_widget
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_touch_trig_task
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_cfg_task
</UL>

<P><STRONG><a name="[1a4]"></a>osc_ui_trig_menu_btn_calculate</STRONG> (Thumb, 710 bytes, Stack size 24 bytes, bsps_ui.o(.text.osc_ui_trig_menu_btn_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osc_ui_trig_menu_btn_calculate &rArr; gui_wid_creater
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_wid_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
</UL>

<P><STRONG><a name="[1a3]"></a>osc_ui_trig_menu_calculate</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsps_ui.o(.text.osc_ui_trig_menu_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osc_ui_trig_menu_calculate &rArr; gui_win_creater
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_win_creater
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_wave_init
</UL>

<P><STRONG><a name="[1a8]"></a>run_thead_priority_idle</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os.o(.text.run_thead_priority_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run_thead_priority_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>thread_start_it</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os.o(.text.thread_start_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = thread_start_it &rArr; HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os.o(os_init_ram)
</UL>
<P><STRONG><a name="[bb]"></a>thread_timer_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os.o(.text.thread_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = thread_timer_init &rArr; mx_time7_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tsk_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time7_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time17_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time16_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time14_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mx_time13_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os.o(os_init_ram)
</UL>
<P><STRONG><a name="[9e]"></a>touch_test_task</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsps_touch.o(.text.touch_test_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touch_test_task &rArr; osc_ui_trig_btn_sel
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_btn_sel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(.text.bsps_touch_task)
</UL>
<P><STRONG><a name="[1b9]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d3]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1d4]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1d5]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d5]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[1bb]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d6]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1d7]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1d8]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[199]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_ui_trig_vol_draw
</UL>

<P><STRONG><a name="[1d9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1da]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1db]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[166]"></a>DMA2D_FillBuffer</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, bsp_lcd.o(.text.DMA2D_FillBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA2D_FillBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_fill_rect
</UL>

<P><STRONG><a name="[14b]"></a>_LCD_ReadAsciiDot</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, bsp_lcd.o(.text._LCD_ReadAsciiDot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _LCD_ReadAsciiDot
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
</UL>

<P><STRONG><a name="[14c]"></a>_LCD_ReadHZDot</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, bsp_lcd.o(.text._LCD_ReadHZDot))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _LCD_ReadHZDot
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStrEx
</UL>

<P><STRONG><a name="[b4]"></a>bsp_lcd_bcl_on</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_lcd.o(.text.bsp_lcd_bcl_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_lcd_bcl_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_lcd.o(os_init_ram)
</UL>
<P><STRONG><a name="[b3]"></a>bsp_lcd_init</STRONG> (Thumb, 390 bytes, Stack size 312 bytes, bsp_lcd.o(.text.bsp_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = bsp_lcd_init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_dma2d_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_lcd.o(os_init_ram)
</UL>
<P><STRONG><a name="[15d]"></a>CPU_CACHE_Enable</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, bsp.o(.text.CPU_CACHE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CPU_CACHE_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[14f]"></a>MPU_Config</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bsp.o(.text.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_Config &rArr; HAL_MPU_ConfigRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[155]"></a>SystemClock_Config</STRONG> (Thumb, 254 bytes, Stack size 128 bytes, bsp.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[0]"></a>bsps_ui_is_trig</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, bsps_ui.o(.text.bsps_ui_is_trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = bsps_ui_is_trig &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_get_run_msg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DispStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_ui.o(os_tsk_ram)
</UL>
<P><STRONG><a name="[1]"></a>osc_cfg_task</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsps_ui.o(.text.osc_cfg_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osc_cfg_task &rArr; osc_ui_trig_lines_show &rArr; gui_show_widget
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_ui_trig_lines_show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_ui.o(os_tsk_ram)
</UL>
<P><STRONG><a name="[ac]"></a>osc_draw_trig_line</STRONG> (Thumb, 612 bytes, Stack size 48 bytes, bsps_ui.o(.text.osc_draw_trig_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osc_draw_trig_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_ui.o(.text.osc_calculate_trig_line)
</UL>
<P><STRONG><a name="[b6]"></a>bsps_gt911_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsps_touch.o(.text.bsps_gt911_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = bsps_gt911_init &rArr; bsps_iic_init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_bsps_hard_reset_stop
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_bsps_hard_reset
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_iic_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_touch.o(os_init_ram)
</UL>
<P><STRONG><a name="[153]"></a>MX_DMA_NVIC_Init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bsps_ad9288.o(.text.MX_DMA_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_DMA_NVIC_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_dma_init
</UL>

<P><STRONG><a name="[174]"></a>bsps_sa_dma_init</STRONG> (Thumb, 172 bytes, Stack size 144 bytes, bsps_ad9288.o(.text.bsps_sa_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bsps_sa_dma_init &rArr; MX_DMA_NVIC_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_NVIC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_init
</UL>

<P><STRONG><a name="[b7]"></a>bsps_sa_init</STRONG> (Thumb, 406 bytes, Stack size 120 bytes, bsps_ad9288.o(.text.bsps_sa_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = bsps_sa_init &rArr; bsps_time_psc_set &rArr; bsps_ui_timebase_draw &rArr; LCD_DispStr &rArr; LCD_DispStrEx &rArr; bsp_lcd_fill_rect &rArr; DMA2D_FillBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_time_psc_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_sa_dma_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsps_ad9288.o(os_init_ram)
</UL>
<P><STRONG><a name="[188]"></a>bsps_xdata_init</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, bsps_thread.o(.text.bsps_xdata_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsps_xdata_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsps_thread_init
</UL>

<P><STRONG><a name="[124]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32h7xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[12c]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[120]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[122]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[123]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[125]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[126]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[128]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[129]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[f8]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 458 bytes, Stack size 12 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[f9]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[fa]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 298 bytes, Stack size 12 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[f7]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 240 bytes, Stack size 20 bytes, stm32h7xx_hal_dma.o(.text.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[fc]"></a>DMA_SetConfig</STRONG> (Thumb, 1484 bytes, Stack size 36 bytes, stm32h7xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[114]"></a>LTDC_SetConfig</STRONG> (Thumb, 624 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(.text.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowSize
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[13a]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 336 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[13c]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 362 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[13d]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 218 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[13e]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[13f]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[145]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32h7xx_hal_i2c.o(.text.I2C_Flush_TXDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[144]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 540 bytes, Stack size 48 bytes, stm32h7xx_hal_i2c.o(.text.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[104]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[108]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[105]"></a>I2C_TransferConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[103]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[106]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[109]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[1a9]"></a>mx_time13_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, os.o(.text.mx_time13_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mx_time13_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_timer_init
</UL>

<P><STRONG><a name="[1ab]"></a>mx_time14_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os.o(.text.mx_time14_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mx_time14_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_timer_init
</UL>

<P><STRONG><a name="[1ac]"></a>mx_time16_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os.o(.text.mx_time16_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mx_time16_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_timer_init
</UL>

<P><STRONG><a name="[1ad]"></a>mx_time17_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os.o(.text.mx_time17_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mx_time17_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_timer_init
</UL>

<P><STRONG><a name="[1ae]"></a>mx_time7_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os.o(.text.mx_time7_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mx_time7_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_timer_init
</UL>

<P><STRONG><a name="[1b8]"></a>os_tsk_init</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, os.o(.text.os_tsk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_tsk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_timer_init
</UL>

<P><STRONG><a name="[158]"></a>run_thead_priority_0</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os.o(.text.run_thead_priority_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run_thead_priority_0
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>run_thead_priority_1</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os.o(.text.run_thead_priority_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run_thead_priority_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>run_thead_priority_2</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os.o(.text.run_thead_priority_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run_thead_priority_2
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>run_thead_priority_3</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os.o(.text.run_thead_priority_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run_thead_priority_3
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>run_thead_priority_4</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os.o(.text.run_thead_priority_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run_thead_priority_4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>gui_draw_task</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, gui.o(.text.gui_draw_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gui_draw_task
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui.o(os_init_ram)
</UL>
<P><STRONG><a name="[4]"></a>gui_thread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gui.o(.text.gui_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gui_thread &rArr; gui_draw_task
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui.o(os_tsk_ram)
</UL>
<P><STRONG><a name="[db]"></a>EventCheckFilter</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, eventrecorder.o(.text.EventCheckFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[d6]"></a>EventGetTS</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventGetTS &rArr; UpdateTS &rArr; atomic_xch32
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementOverflowTS
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[dc]"></a>EventRecordItem</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, eventrecorder.o(.text.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockRecord
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockRecord
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[df]"></a>GetContext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetContext &rArr; atomic_inc8
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[e0]"></a>GetRecordIndex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.GetRecordIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetRecordIndex &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[d9]"></a>IncrementOverflowTS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementOverflowTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IncrementOverflowTS &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[e4]"></a>IncrementRecordsDumped</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsDumped))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IncrementRecordsDumped &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[e3]"></a>IncrementRecordsWritten</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsWritten))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IncrementRecordsWritten &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[e1]"></a>LockRecord</STRONG> (Thumb, 54 bytes, Stack size 28 bytes, eventrecorder.o(.text.LockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[e2]"></a>UnlockRecord</STRONG> (Thumb, 50 bytes, Stack size 28 bytes, eventrecorder.o(.text.UnlockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UnlockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[d8]"></a>UpdateTS</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eventrecorder.o(.text.UpdateTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UpdateTS &rArr; atomic_xch32
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_xch32
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[ee]"></a>atomic_inc32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_inc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementOverflowTS
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>

<P><STRONG><a name="[ed]"></a>atomic_inc8</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_inc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
</UL>

<P><STRONG><a name="[15b]"></a>atomic_xch32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_xch32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_xch32
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
</UL>

<P><STRONG><a name="[e7]"></a>crc16_ccitt</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, eventrecorder.o(.text.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[1a5]"></a>stdout_putchar</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, retarget_io.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1bc]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ba]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1bf]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1be]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b2]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
